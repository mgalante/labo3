Threads
TCB Donde se guardan lo datos de los threads. (como la pcb de los procesos)

para poder usar theads hay que agregar en el gcc el paramtero -l pthread

cuando un proceso finaliza, mueren todos los threads.
Un proceso puede finalizar si cualquier thread llama a exit o si finaliza el main.

un thread finaliza si retorna su funcion y si se llama al ptrhead_exit();

pthread_create() crea un trhead
pthread_join() Esta funcion libera un trhead. Bloquea al trhead que la llama hasta que termine el trhead que intenta liberar. Va a recibir el valor de retorno del thread.

Las señales no se pueden usar entre threads. Si recibo una senal de otro proceso se frena el trhead principal, pero elresto no (a menos que sea una señal de finalizar proceso y finaliza todo).

Estamos usando threads del tipo "joinable", se crean por default. Indica que cada trhead debe ser liberado por cualquier otro thread.


existe un tipo llamado thread detached, en el cual el trhead es el que libera la memoria y no puedo dar valor de retorno.

pthread_attr_t attr; defino una variable para guardar los attributos de configuracion
pthread_attr_init(&attr); //inicializo la estructura con los valores default
pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED); //le digo que es detached
//Estas configuraciones estan en el man pthread_attr_init al fondo.
//Lanza un trhead
pthread_create(&thid, &attr, mi_funcion, NULL);

en thid voy a recibir el thread id. El ultimo null corresponde al puntero de los argumentos que va a trhead.


AGenda
25/4 semaforos (hoy)
2/5 revision tp /memoria compartida
16/5 examen
23/5 finales
30/5 cola de mensajes
6/6 entrega de tp




Semaforos
1) 1 proceso accede a cierto recurso (Binario)
	x procesos acceden a cierto recurso (contadores)
2) wait (decrece el semaforo)/ signal (incrementa el semaforo)
3) Binarios 0 -1 / Contadores  0..x 

Para que los usamos:
Marcar el orden de ejecucion de procesos

prefijos de funciones
sem -> semaforos
shm -> memoria compartida
msg -> cola de mensajes

sufijos
get -> crear u obtiene un recurso
ctl -> control o lectura de mas informacion


int semget(key_t key /*identificacion*/, int nsems /*cantidad*/, int semflg )
flags:
IPC_CREAT
se usa pra crear y/o abrir un conjunto de semaforos.
devuelve el identificador de acceso a los semaforos.
se usa para crear antes del fork por ejemplo y que lo hereden los hijos.

semctl;
par obtener un key_t puedo usar 

1)-hardcoding
2)-ftok(char* path, int p)
es como un md5 pero devuelve un entero.
el path debe ser a un archivo que tiene que existir

3)-IPC_PRIVATE. Me lo da al azar el operativo.

/*NOTA AL LADO
*NO SE COPIA A LOS HIJOS SENALES U A LAS ALARMAS CON FORK.
USA CLONE y se puedo pdecir que queremos que el proceso hijo o thread reciba.
Podria forkear con clone y tener otro compartamiento.
*/



semget(1542,5,IPC_CREAT | 0777) Crea si no existe el conjunto de semaforos 1542 con 5 semaforos.
Si ya existe y le pido que lo cree no va a hacer nada (no lo va a pisar).
Si le exisita con distinta cantidad de semaforos es success.
Si existe y tengo restringido los permisos, me va a dar error.

Si quiero solamente abrirlo (y no crearlo)
semget(1542,0,0)
Solo da ok si existe y tengo permisos.

Luego de crear el conjunto de semaforos debo setearle un valor inicial. 
Para eso uso semctl.

int semctl(int semid, int semnum, int cmd, ...);  //los ... se manejan con varhglist y un conjunto de funciones relacionadas.

cmd posibles que vamos a usar
IPC_RMID); /*eliminar conjunto de semaforos*/ Es importante porque el semaforo persiste al finalizar el programa.
SET_VAL,1); /*inicializar con valor*/
/*Hay un monton de opciones para obtener informacion */


semnum es el numero de semaforo que quiero acceder
No puedo crear semaforos binarios que esten limitados, es binario por el uso que le de.


Ojo que puedo creer que estoy creando un semaforo, y en realidad ya existe. Paso seguido voy a inicializar el semaforo y voy a estar cambiando el valor y rompiendo tood.

int semop(int semid, struct sembuf *sops, unsigned nsops);

void cwait(int semid, int sennum ){	
	struct sembuf op;
	op.sem_op = -1;
	op.sem_num = sennum;
	op.sem_flg = 0;
	semop(semid,&op,1);

}


semop -> si el sem=0 se bloqvoid cwait(int semid, int sennum ){	
	struct sembuf op;
	op.sem_op = -1;
	op.sem_num = sennum;
	op.sem_flg = 0;
	semop(semid,&op,1);

}
uea, y decrementa si es > 0;
retorna >0 si ok.
retorna -1 si no existe el conjunto de semaforo o el numero de semaforo



           unsigned short sem_num;  /* semaphore number */
           short          sem_op;   /* semaphore operation */
           short          sem_flg;  /* operation flags */



void csignal(int semid, int sennum ){	
	struct sembug op;
	op.sem_op = 1;
	op.sem_num = sennum;
	op.sem_flg = 0;
	semop(semid,&op,1);

}

para bloquear threads necesitamos usar mutex en lugar de semaforos para no bloquear toodo el proceso entero.
mutex es binario.





!Memoria compartida

//crear SHM
shmget(key_t key, inmt length, 	int flags)


shmget(
	key_t key, //lo puedo crear con ftok, hardcoded o ipc_create
	int length,  //cant de bytes sizeof(int) o sizeof(struct x) o 512 o asi.
	int flags // IPC_CREAT | 0777
	)

Attachar memoria.
Agrego al Stack y Heap el acceso al SHM y que el SO me deje.

Si tengo 2 procesos

A:
int shmid = shmget(XXX, sizeof(int), IPC_CREAT|0777);
int* var = (int*)shmat(shmid,null,0); 
cwait(s0);
(*var)=5;
csignal(s0);
shmdt(var);
shmctl(shmid, IPC_RMID,0); //ELIMINATE CUANDO TODOS HAYAN DesATACHADO

B:
shmget(XXX, 0, 0)
int* var = (int*)shmat(shmid,null,0);
shmdt(var);


Para podes usar la variable debe ser protegida por semaforos
cwait(s0);
(*var)=5;
csignal(s0);

Ojo con los deadlock si usas multiples semaforos. SE puede usar mas de 1 semaforo para 1 memoria compartida (si es una estructura por ejemplo)


shmdt(var);
shmctl(shmid, IPC_RMID,0); //ELIMINATE CUANDO TODOS HAYAN DesATACHADO

